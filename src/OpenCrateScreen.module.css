/* Base container */
.container {
    display: flex; /* Use flexbox for layout */
    flex-direction: column; /* Stack children vertically */
    justify-content: center; /* Center vertically */
    align-items: center; /* Center horizontally */
    min-height: 100vh; /* Ensure it takes full viewport height */
    position: relative; /* Needed for absolute positioning of children */
    box-sizing: border-box;
    padding: 20px;
    overflow: hidden; /* Hide anything that might overflow during animation */
  }
  
  /* Content area for results */
  .contentContainer {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-bottom: 180px; /* Space for buttons below */
    min-height: 180px; /* Ensure space is reserved even when empty */
    text-align: center;
  }
  
  .placeholder {
      min-height: 180px; /* Match the potential height of the result */
  }
  
  .themeText {
    font-size: 24px;
    margin-bottom: 10px;
    font-weight: bold;
    color: #333; /* Example text color */
  }
  
  .square {
    width: 100px;
    height: 100px;
    border: 1px solid gray;
    margin-bottom: 10px;
  }
  
  .rarityText {
    font-weight: bold;
    font-size: 20px;
  }
  
  /* Crate Image and Animation */
  .crateImage {
    position: absolute;
    width: 150px; /* Adjust size as needed */
    height: 150px;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); /* Center precisely */
    object-fit: contain; /* Like resizeMode="contain" */
    /* Set initial state for animation if needed (e.g., opacity: 0) */
    /* The animation class will handle the changes */
  }
  
  .crateAnimating {
    animation: growShrinkFade 1.5s ease-in-out forwards; /* name duration timing-function fill-mode */
  }
  
  @keyframes growShrinkFade {
    0% {
      opacity: 0;
      transform: translate(-50%, -50%) scale(0.5);
    }
    50% {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1.2); /* Slightly larger peak */
    }
    100% {
      opacity: 0;
      transform: translate(-50%, -50%) scale(0.5);
    }
  }
  
  
  /* Button Styles */
  .buttonContainer {
    position: absolute;
    bottom: 90px; /* Position from bottom */
    left: 50%;
    transform: translateX(-50%); /* Center the container */
    display: flex; /* Arrange buttons horizontally */
    gap: 20px; /* Space between buttons */
    width: auto; /* Allow container to size based on buttons */
    justify-content: center; /* Center buttons within the container */
  }
  
  .button {
    padding: 12px 20px; /* Adjusted padding */
    border-radius: 5px;
    border: none;
    color: white;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s ease; /* Smooth hover effect */
    font-size: 16px;
  }
  
  .claimButton {
    background-color: #4CAF50; /* Green */
  }
  .claimButton:hover {
    background-color: #45a049;
  }
  
  .claimAndEquipButton {
    background-color: #007bff; /* Blue */
  }
  .claimAndEquipButton:hover {
    background-color: #0056b3;
  }
  
  
  /* Open Another Button Area */
  .openAnotherButtonContainer {
    position: absolute;
    bottom: 30px; /* Below the action buttons */
    left: 50%;
    transform: translateX(-50%); /* Center the button */
  }
  
  .openButton {
      padding: 15px 30px;
      font-size: 18px;
      background-color: #ff9800; /* Orange */
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-weight: bold;
      transition: background-color 0.2s ease;
  }
  
  .openButton:hover {
      background-color: #e68a00;
  }